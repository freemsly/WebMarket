//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebMarket.Model {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class wfh_Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal wfh_Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WebMarket.Model.wfh.Resources", typeof(wfh_Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT Isbn, S3FolderName, HasImages from DigitalAsset.Product(NOLOCK) WHERE Region=&apos;EU&apos; AND ISBN IS NOT NULL AND S3FolderName IS NOT NULL.
        /// </summary>
        internal static string Ingestion_Images {
            get {
                return ResourceManager.GetString("Ingestion_Images", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT  ProductNumber, HasMarc, MARCFileName FROM ProductMARC WHERE Environment=&apos;wfh&apos;.
        /// </summary>
        internal static string Ingestion_Marc {
            get {
                return ResourceManager.GetString("Ingestion_Marc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///SELECT Isbn, PatronLibraryId AS LibraryId, Count(1) AS TotalCirculations 
        ///FROM [DPCore].[holding].[PatronInterest](NOLOCK)  PT
        ///WHERE InterestTypeId=3 AND EndOn &gt; GETDATE()
        ///GROUP BY Isbn,PatronLibraryId
        ///ORDER BY COUNT(1) DESC
        ///.
        /// </summary>
        internal static string OneClick_Circulation {
            get {
                return ResourceManager.GetString("OneClick_Circulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT SourceItemId,	
        ///		Isbn, 
        ///		S3Folder AS S3FolderName,
        ///		CAST(NULLIF(XmlDoc.value(&apos;(/TitleIndex/ActivatedOn)[1]&apos;, &apos;varchar(30)&apos;), &apos;&apos;) AS DATETIME)  AS ActivationTimeStamp,
        ///		XmlDoc.value(&apos;(/TitleIndex/IsPreRelease)[1]&apos;, &apos;BIT&apos;) AS IsPreRelease,
        ///		Imprint,
        ///		XmlDoc.value(&apos;(/TitleIndex/PreviewFile)[1]&apos;, &apos;VARCHAR(250)&apos;) AS PreviewFileName, 
        ///		XmlDoc.value(&apos;(/TitleIndex/HasDrm)[1]&apos;, &apos;BIT&apos;) AS HasDrm,
        ///		XmlDoc.value(&apos;(/TitleIndex/HasAttachments)[1]&apos;, &apos;BIT&apos;) AS HasAttachments, 
        ///		ActualDurationMinutes [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OneClick_Metadata {
            get {
                return ResourceManager.GetString("OneClick_Metadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE @now Date = GETDATE()
        ///SELECT libraryId, Isbn, COUNT(1) AS TotalCopies
        ///FROM holding.LibraryIsbn    
        ///WHERE  BeginOn &lt;= @now AND (EndOn IS NULL OR EndOn &gt; @now) 
        ///AND (CircCap &lt; 0 OR CircCount &lt; CircCap) AND LibraryId &lt;&gt; 1062  
        ///GROUP BY libraryId,Isbn
        ///ORDER BY COUNT(1) DESC
        ///
        ///
        ///
        ///
        ///.
        /// </summary>
        internal static string OneClick_Ownership {
            get {
                return ResourceManager.GetString("OneClick_Ownership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///SELECT Isbn, PatronLibraryId AS LibraryId, Count(1) AS TotalHolds 
        ///FROM [DPCore].[holding].[PatronInterest](NOLOCK)  PT
        ///WHERE InterestTypeId=2 AND EndOn &gt; GETDATE()
        ///GROUP BY Isbn,PatronLibraryId
        ///ORDER BY COUNT(1) DESC.
        /// </summary>
        internal static string OneClick_TotalHolds {
            get {
                return ResourceManager.GetString("OneClick_TotalHolds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE @now Date = GETDATE()
        ///SELECT libraryId, Isbn, EndOn,CircCap,CircCount
        ///FROM holding.LibraryIsbn(NOLOCK)    
        ///WHERE  EndOn IS NOT NULL AND EndOn &gt;= @now AND (CircCap &lt; 0 OR CircCount &lt; CircCap) AND LibraryId &lt;&gt; 4021  .
        /// </summary>
        internal static string Platform_Expiration {
            get {
                return ResourceManager.GetString("Platform_Expiration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT CAST(S.[SubscriptionId] AS varchar(10)) AS Id
        ///      ,S.Name
        ///	  ,SI.Isbn
        ///	  ,LS.LibraryId As EntityId
        ///      ,LS.[BeginOn] AS StartDate
        ///      ,LS.[EndOn] As EndDate
        ///  FROM [DPCore].[holding].[LibrarySubscription] LS
        ///  INNER JOIN holding.Subscription S
        ///  ON LS.SubscriptionId = S.SubscriptionId
        ///  INNER JOIN holding.SubscriptionIsbn SI
        ///  ON SI.SubscriptionId = LS.SubscriptionId
        ///  WHERE LS.EndOn &gt;= Getdate()
        ///.
        /// </summary>
        internal static string Platform_Subscription {
            get {
                return ResourceManager.GetString("Platform_Subscription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT &apos;&apos; Isbn, &apos;&apos;  AS Id, 0 AS Price, &apos;&apos; ItemNumber, &apos;&apos; AS Name WHERE 1=2.
        /// </summary>
        internal static string Source_Bundles {
            get {
                return ResourceManager.GetString("Source_Bundles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///SELECT [ItemCode] , [Description] FROM productmetadata WITH (NOLOCK) WHERE [Description] IS NOT NULL AND   [Description] &lt;&gt; &apos;&apos;
        ///
        ///
        ///.
        /// </summary>
        internal static string Source_Description {
            get {
                return ResourceManager.GetString("Source_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  SELECT [ItemCode],REPLACE(REPLACE(Genre,&apos;,&apos;,&apos;&apos;),&apos;;&apos;,&apos;,&apos;)
        ///FROM ProductMetadata PM WHERE [ItemCode] IS NOT NULL AND [Genre] IS NOT  NULL
        ///    .
        /// </summary>
        internal static string Source_Genres {
            get {
                return ResourceManager.GetString("Source_Genres", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT [ItemCode] AS [TitleId]
        ///	,REPLACE(ProductName,CHAR(11),&apos;&apos;) AS [Title]
        ///	,REPLACE(SubTitle,CHAR(11),&apos;&apos;) AS [Subtitle]
        ///	,(Select [ContentAdvisory-Sex] AS [@sex], [ContentAdvisory-Language] AS [@language], [ContentAdvisory-Violence] AS [@violence] FOR XML PATH(&apos;ContentAdvisory&apos;),Type) AS &apos;ContentAdvisory&apos;
        ///	,( SELECT CASE [TYPE] WHEN 1 THEN &apos;author&apos; WHEN 3 THEN &apos;narrator&apos; END AS [@type],
        ///				c.[TitleGroupRank] AS [@order],
        ///				c.FirstName AS [@fn],
        ///				c.LastName AS [@ln],
        ///				&apos;&apos; AS [@organisation [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_MediaTitle_Merge {
            get {
                return ResourceManager.GetString("Source_MediaTitle_Merge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --SELECT DISTINCT TOP (100) PERCENT CASE cn.ContributorTypeID WHEN 842 THEN &apos;author&apos; WHEN 906 THEN &apos;narrator&apos; END AS contributorType, c.forenames AS FirstName, 
        ///--                      c.surname AS LastName, c.mail_name AS MailName, cn.ContributorTypeID, convert(nvarchar(15),c.account_no) AS SourceId
        ///--FROM         dbo.tm_Contributor(nolock) AS cn INNER JOIN
        ///--                      dbo.customers(nolock) AS c ON cn.account_no = c.account_no
        ///--WHERE     (cn.ContributorTypeID IN (906)) AND (c.mail_name IS  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_Narrator {
            get {
                return ResourceManager.GetString("Source_Narrator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT DISTINCT AccountNo,OrderNo,InvoiceNo,EntityID,OrderDate,InvoiceDate,ItemNo,OHD.ISBN,0 AS LibraryId,Quantity,NetAmount,PM.MediaFormat AS [Format], REPLACE(OrderMethod,&apos;Web&apos;,&apos;WebMarket&apos;) AS OrderMethod
        ///FROM OrderHistoryDetail OHD INNER JOIN ProductMetadata PM 
        ///ON OHD.ISBN = PM.ISBN
        ///WHERE OrderLineStatus IN (&apos;Completed&apos;) AND OrderMethod=&apos;Web&apos;.
        /// </summary>
        internal static string Source_OrderHistory {
            get {
                return ResourceManager.GetString("Source_OrderHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT DISTINCT OneClickdigitalLibraryID AS OneclicklibraryId,EntityId FROM LibraryAccount(NOLOCK) WHERE EntityID IS NOT NULL AND OneClickdigitalLibraryID IS NOT NULL
        ///
        ///SELECT DISTINCT ISNULL(CAST(LA.EntityId AS INT),0),
        ///				ISBN AS Isbn,
        ///				SUM(CAST(Quantity AS INT)) AS TotalCopies,
        ///				--((SELECT DISTINCT STUFF((SELECT &apos;,&apos;+SubscriptionName FROM #temp_subscription WHERE AccountId = AccountNo AND ISBN =TPD.ISBN   FOR XML PATH(&apos;&apos;)),1,1,&apos;&apos;))) AS SubscriptionName,
        ///				&apos;&apos; AS SubscriptionName,
        ///				ISNULL( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_Ownership {
            get {
                return ResourceManager.GetString("Source_Ownership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT 
        ///      [ISBN]
        ///      ,[Currency]
        ///      ,[ListPrice]
        ///	  ,NULL AS [RetailPrice]
        ///	  ,NULL AS [DiscountPrice]
        ///  FROM [dbo].[Price].
        /// </summary>
        internal static string Source_Pricing {
            get {
                return ResourceManager.GetString("Source_Pricing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --declare @publisher table (Name nvarchar(150), Label nvarchar(150), AccountNo nvarchar(12))
        ///
        ///--insert into @publisher (Name,Label,AccountNo)	
        ///--select distinct REPLACE(REPLACE([publisher],&apos; &amp; &apos;,&apos; and &apos;),&apos; Co.&apos;,&apos; Company&apos;), publisher, [item code] FROM [dbo].productmetadata(nolock) where publisher is not null order by [publisher]
        ///
        ///
        ///--  select G.Name, 
        ///--	stuff( (Select &apos;,&apos; + convert(nvarchar(12),DN.AccountNo) 
        ///--	from @publisher as DN where DN.Name = G.Name 
        ///--	order by G.Name for xml path(&apos;&apos;) ),1,1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_Publisher {
            get {
                return ResourceManager.GetString("Source_Publisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT isbn, Review FROM ProductMetadata WHERE Review IS NOT NULL.
        /// </summary>
        internal static string Source_Review {
            get {
                return ResourceManager.GetString("Source_Review", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT isbn, splitdata AS countrycodes   
        ///FROM   ProductMetadata  CROSS APPLY
        /// dbo.fnSplitString(  [CountryCode],&apos;;&apos;)  cc 
        ///INNER JOIN (SELECT DISTINCT country FROM LibraryAddress) LA
        ///ON   cc.splitdata = LA.country
        ///.
        /// </summary>
        internal static string Source_SalesRights {
            get {
                return ResourceManager.GetString("Source_SalesRights", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --WITH QuarterlyTitles(SOPID,[Title],[SeoTitle],[ReleaseYear],[Release],[ReleaseType], [Job_no])
        ///--AS (
        ///--SELECT 
        /// 
        ///--SOPID,
        ///--((cast(PlannedReleaseMonth AS NVARCHAR(10))
        ///--+CASE
        ///--WHEN PlannedReleaseMonth%10=1 AND PlannedReleaseMonth%100&lt;&gt;11 THEN &apos;st&apos;
        ///--WHEN PlannedReleaseMonth%10=2 AND PlannedReleaseMonth%100&lt;&gt;12 THEN &apos;nd&apos;
        ///--WHEN PlannedReleaseMonth%10=3 AND PlannedReleaseMonth%100&lt;&gt;13 THEN &apos;rd&apos;
        ///--ELSE &apos;th&apos;
        ///--END) + &apos; Quarter &apos; + cast(PlannedReleaseYear AS NVARCHAR(4)) + &apos; &apos; + sopname + &apos; COP&apos;) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_SOP {
            get {
                return ResourceManager.GetString("Source_SOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --DECLARE @subscription table
        ///--(
        ///--    Isbn varchar(25),
        ///--    SubscriptionName varchar(500),
        ///--	SubscriptionId varchar(25)
        ///--)
        ///--INSERT INTO @subscription
        ///--SELECT SL.JOB_NO As Id, SL.description AS Name, SL2.isbn As Isbn   
        ///--    FROM stocklines(NOLOCK) SL 	
        ///--	   INNER JOIN  Stoccomponent_stock(NOLOCK) SS on     SL.stock_no = SS.stock_no
        ///--	   INNER JOIN  stocklines(NOLOCK) SL2 on     SL2.stock_no = SS.associated_stock
        ///--	   WHERE  SL.Job_No LIKE &apos;SUBID%&apos;
        ///	   
        ///--SELECT * FROM @subscription	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source_Subscription {
            get {
                return ResourceManager.GetString("Source_Subscription", resourceCulture);
            }
        }
    }
}
